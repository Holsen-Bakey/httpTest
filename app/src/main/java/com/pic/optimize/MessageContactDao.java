package com.pic.optimize;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MessageContactBean".
*/
public class MessageContactDao extends AbstractDao<MessageContact, String> {

    public static final String TABLENAME = "MessageContactBean";

    /**
     * Properties of entity MessageContact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property My_user_id = new Property(1, String.class, "my_user_id", false, "MY_USER_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property Daren_type = new Property(6, String.class, "daren_type", false, "DAREN_TYPE");
        public final static Property Level = new Property(7, String.class, "level", false, "LEVEL");
        public final static Property Desc = new Property(8, String.class, "desc", false, "DESC");
    }


    public MessageContactDao(DaoConfig config) {
        super(config);
    }
    
    public MessageContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MessageContactBean\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"MY_USER_ID\" TEXT," + // 1: my_user_id
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"STATUS\" TEXT," + // 5: status
                "\"DAREN_TYPE\" TEXT," + // 6: daren_type
                "\"LEVEL\" TEXT," + // 7: level
                "\"DESC\" TEXT);"); // 8: desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MessageContactBean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageContact entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String my_user_id = entity.getMy_user_id();
        if (my_user_id != null) {
            stmt.bindString(2, my_user_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String daren_type = entity.getDaren_type();
        if (daren_type != null) {
            stmt.bindString(7, daren_type);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(8, level);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageContact entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String my_user_id = entity.getMy_user_id();
        if (my_user_id != null) {
            stmt.bindString(2, my_user_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String daren_type = entity.getDaren_type();
        if (daren_type != null) {
            stmt.bindString(7, daren_type);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(8, level);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MessageContact readEntity(Cursor cursor, int offset) {
        MessageContact entity = new MessageContact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // my_user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // daren_type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // level
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageContact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMy_user_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDaren_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MessageContact entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MessageContact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageContact entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
